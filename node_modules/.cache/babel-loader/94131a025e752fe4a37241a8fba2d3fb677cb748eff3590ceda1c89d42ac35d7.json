{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nconst BASE_URL = \"https://xnzd52zoqyuu7zkv5i5r42uiua0jzapk.lambda-url.eu-north-1.on.aws/\";\nasync function generateTestToken(existingToken) {\n  // Check if the existing token is expired\n  if (existingToken) {\n    try {\n      const decoded = jwtDecode(existingToken);\n      const expiryTime = decoded.exp * 1000; // Convert to milliseconds\n      const currentTime = Date.now();\n      if (currentTime < expiryTime) {\n        // Token is still valid, copy to clipboard\n        await navigator.clipboard.writeText(existingToken);\n        return {\n          error: null,\n          token: existingToken\n        };\n      } else {\n        console.log(\"Test token expired, regenerating...\");\n      }\n    } catch (error) {\n      console.error(\"Invalid token:\", error);\n    }\n  }\n\n  // Construct URL for generating a new test token\n  const url = `${BASE_URL}?req=test-token`;\n  try {\n    const response = await fetch(url);\n    console.log(response);\n    if (!response.ok) throw new Error(\"Failed to fetch\");\n    const data = await response.json();\n    console.log(data);\n    if (!data[\"test-token\"]) throw new Error(\"Invalid response\");\n\n    // Save new test token in local storage\n    localStorage.setItem(\"t_data\", JSON.stringify({\n      ...JSON.parse(localStorage.getItem(\"t_data\") || \"{}\"),\n      \"test-token\": data[\"test-token\"]\n    }));\n    return {\n      error: null,\n      token: data[\"test-token\"]\n    };\n  } catch (error) {\n    console.error(\"Error fetching test token:\", error);\n    return {\n      error: \"Failed to fetch test token\"\n    };\n  }\n}\nexport default generateTestToken;","map":{"version":3,"names":["jwtDecode","BASE_URL","generateTestToken","existingToken","decoded","expiryTime","exp","currentTime","Date","now","navigator","clipboard","writeText","error","token","console","log","url","response","fetch","ok","Error","data","json","localStorage","setItem","JSON","stringify","parse","getItem"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/functions/generateTestToken.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\nconst BASE_URL = \"https://xnzd52zoqyuu7zkv5i5r42uiua0jzapk.lambda-url.eu-north-1.on.aws/\";\n\nasync function generateTestToken(existingToken) {\n    // Check if the existing token is expired\n    if (existingToken) {\n        try {\n            const decoded = jwtDecode(existingToken);\n            const expiryTime = decoded.exp * 1000; // Convert to milliseconds\n            const currentTime = Date.now();\n\n            if (currentTime < expiryTime) {\n                // Token is still valid, copy to clipboard\n                await navigator.clipboard.writeText(existingToken);\n                return { error: null, token: existingToken };\n            } else {\n                console.log(\"Test token expired, regenerating...\");\n            }\n        } catch (error) {\n            console.error(\"Invalid token:\", error);\n        }\n    }\n\n    // Construct URL for generating a new test token\n    const url = `${BASE_URL}?req=test-token`;\n\n    try {\n        const response = await fetch(url);\n        console.log(response)\n        if (!response.ok) throw new Error(\"Failed to fetch\");\n\n        const data = await response.json();\n        console.log(data)\n        if (!data[\"test-token\"]) throw new Error(\"Invalid response\");\n\n        // Save new test token in local storage\n        localStorage.setItem(\"t_data\", JSON.stringify({\n            ...JSON.parse(localStorage.getItem(\"t_data\") || \"{}\"),\n            \"test-token\": data[\"test-token\"]\n        }));\n\n        return { error: null, token: data[\"test-token\"] };\n    } catch (error) {\n        console.error(\"Error fetching test token:\", error);\n        return { error: \"Failed to fetch test token\" };\n    }\n}\n\nexport default generateTestToken;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,MAAMC,QAAQ,GAAG,wEAAwE;AAEzF,eAAeC,iBAAiBA,CAACC,aAAa,EAAE;EAC5C;EACA,IAAIA,aAAa,EAAE;IACf,IAAI;MACA,MAAMC,OAAO,GAAGJ,SAAS,CAACG,aAAa,CAAC;MACxC,MAAME,UAAU,GAAGD,OAAO,CAACE,GAAG,GAAG,IAAI,CAAC,CAAC;MACvC,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAE9B,IAAIF,WAAW,GAAGF,UAAU,EAAE;QAC1B;QACA,MAAMK,SAAS,CAACC,SAAS,CAACC,SAAS,CAACT,aAAa,CAAC;QAClD,OAAO;UAAEU,KAAK,EAAE,IAAI;UAAEC,KAAK,EAAEX;QAAc,CAAC;MAChD,CAAC,MAAM;QACHY,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MACtD;IACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZE,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IAC1C;EACJ;;EAEA;EACA,MAAMI,GAAG,GAAG,GAAGhB,QAAQ,iBAAiB;EAExC,IAAI;IACA,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjCF,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IACrB,IAAI,CAACA,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IAEpD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCR,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;IACjB,IAAI,CAACA,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,IAAID,KAAK,CAAC,kBAAkB,CAAC;;IAE5D;IACAG,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAAC;MAC1C,GAAGD,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;MACrD,YAAY,EAAEP,IAAI,CAAC,YAAY;IACnC,CAAC,CAAC,CAAC;IAEH,OAAO;MAAET,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAEQ,IAAI,CAAC,YAAY;IAAE,CAAC;EACrD,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZE,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MAAEA,KAAK,EAAE;IAA6B,CAAC;EAClD;AACJ;AAEA,eAAeX,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}