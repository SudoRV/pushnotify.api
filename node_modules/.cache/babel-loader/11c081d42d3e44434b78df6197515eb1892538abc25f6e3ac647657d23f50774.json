{"ast":null,"code":"function extractBody(code) {\n  let body = {};\n\n  // Regular expression to match key-value pairs, including triple-quoted and multi-line values\n  let regex = /\"([^\"]+)\"\\s*:\\s*(?:\"\"\"([\\s\\S]+?)\"\"\"|\"([^\"]*)\"|(\\d+|true|false|null))/gm;\n  let match;\n  while ((match = regex.exec(code)) !== null) {\n    let key = match[1]; // Extract key\n    let value = match[2] || match[3] || match[4]; // Extract the correct value\n\n    // Convert numeric and boolean values properly\n    if (!isNaN(value) && value !== null) {\n      value = Number(value);\n    } else if (value === \"true\") {\n      value = true;\n    } else if (value === \"false\") {\n      value = false;\n    } else if (value === \"null\") {\n      value = null;\n    }\n\n    // Remove escape sequences for multi-line private keys or JWT tokens\n    if (typeof value === \"string\") {\n      value = value.replace(/\\\\n/g, \"\\n\").replace(/\\\\/g, \"\"); // Convert JSON-style `\\n` to actual newlines\n    }\n    body[key] = value;\n  }\n  return body;\n}\nexport default extractBody;","map":{"version":3,"names":["extractBody","code","body","regex","match","exec","key","value","isNaN","Number","replace"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/functions/ExtractBody.js"],"sourcesContent":["function extractBody(code) {\n    let body = {};\n\n    // Regular expression to match key-value pairs, including triple-quoted and multi-line values\n    let regex = /\"([^\"]+)\"\\s*:\\s*(?:\"\"\"([\\s\\S]+?)\"\"\"|\"([^\"]*)\"|(\\d+|true|false|null))/gm;\n\n    let match;\n    while ((match = regex.exec(code)) !== null) {\n        let key = match[1]; // Extract key\n        let value = match[2] || match[3] || match[4]; // Extract the correct value\n\n        // Convert numeric and boolean values properly\n        if (!isNaN(value) && value !== null) {\n            value = Number(value);\n        } else if (value === \"true\") {\n            value = true;\n        } else if (value === \"false\") {\n            value = false;\n        } else if (value === \"null\") {\n            value = null;\n        }\n\n        // Remove escape sequences for multi-line private keys or JWT tokens\n        if (typeof value === \"string\") {\n            value = value.replace(/\\\\n/g, \"\\n\").replace(/\\\\/g, \"\"); // Convert JSON-style `\\n` to actual newlines\n        }\n\n        body[key] = value;\n    }\n\n    return body;\n}\n\nexport default extractBody;"],"mappings":"AAAA,SAASA,WAAWA,CAACC,IAAI,EAAE;EACvB,IAAIC,IAAI,GAAG,CAAC,CAAC;;EAEb;EACA,IAAIC,KAAK,GAAG,wEAAwE;EAEpF,IAAIC,KAAK;EACT,OAAO,CAACA,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACJ,IAAI,CAAC,MAAM,IAAI,EAAE;IACxC,IAAIK,GAAG,GAAGF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,IAAIG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9C;IACA,IAAI,CAACI,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,KAAK,IAAI,EAAE;MACjCA,KAAK,GAAGE,MAAM,CAACF,KAAK,CAAC;IACzB,CAAC,MAAM,IAAIA,KAAK,KAAK,MAAM,EAAE;MACzBA,KAAK,GAAG,IAAI;IAChB,CAAC,MAAM,IAAIA,KAAK,KAAK,OAAO,EAAE;MAC1BA,KAAK,GAAG,KAAK;IACjB,CAAC,MAAM,IAAIA,KAAK,KAAK,MAAM,EAAE;MACzBA,KAAK,GAAG,IAAI;IAChB;;IAEA;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BA,KAAK,GAAGA,KAAK,CAACG,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5D;IAEAR,IAAI,CAACI,GAAG,CAAC,GAAGC,KAAK;EACrB;EAEA,OAAOL,IAAI;AACf;AAEA,eAAeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}