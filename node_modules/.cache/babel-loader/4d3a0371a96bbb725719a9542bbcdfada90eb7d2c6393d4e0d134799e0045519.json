{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\projects\\\\jWTFcm\\\\clients\\\\pushnotify.api\\\\src\\\\components\\\\TestApi.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\nconst TestAPI = () => {\n  _s();\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n  const copyToken = token => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n  async function replaceHolders(latestCode, btnText, step, event) {\n    let t_data = localStorage.getItem(\"t_data\");\n    let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n    if (!testToken) {\n      const res = await generateTestToken(testToken);\n      testToken = res.token;\n      if (!testToken) return;\n    }\n    if (!latestCode.includes(testToken)) {\n      latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n    }\n    const body = extractBody(latestCode);\n    body[\"access-token\"] = testToken;\n    if (body[\"client-email\"] === \"your-service-account-client-email\") {\n      const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n      const clientEmail = userData.email || \"your-email@gmail.com\";\n      body[\"client-email\"] = clientEmail;\n      latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n    }\n    if (body[\"private-key\"] === \"your-service-account-private-key\") {\n      body[\"private-key\"] = secret[\"secret-key\"];\n    }\n    return body;\n  }\n  const codeRefs = useRef({});\n  const run = async (event, step) => {\n    let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n    const storedCode = localStorage.getItem(`codeblock_${step}_${selectedLanguage}`);\n    const btnText = event.target.innerText;\n    let body;\n    if (!storedCode) {\n      body = await replaceHolders(latestCode, btnText, step, event);\n      console.log(body);\n    } else {\n      body = extractBody(latestCode);\n    }\n    if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n    if (btnText === \"Copy Device Id\") {\n      var _responses$step, _responses$step$selec, _responses$step$selec2;\n      const extractedDeviceId = (_responses$step = responses[step]) === null || _responses$step === void 0 ? void 0 : (_responses$step$selec = _responses$step[selectedLanguage]) === null || _responses$step$selec === void 0 ? void 0 : (_responses$step$selec2 = _responses$step$selec.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)) === null || _responses$step$selec2 === void 0 ? void 0 : _responses$step$selec2[1];\n      if (extractedDeviceId) {\n        await navigator.clipboard.writeText(extractedDeviceId);\n        setDeviceId(extractedDeviceId);\n      }\n      return;\n    }\n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n    setResponses(prev => ({\n      ...prev,\n      [step]: {\n        [selectedLanguage]: `${btnText.split(\" \")[0].replace(/e$/, \"\")}ing...`\n      }\n    }));\n    setLoading(prev => ({\n      ...prev,\n      [step]: true\n    }));\n    try {\n      const response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const data = await response.json();\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: JSON.stringify(data, null, 2)\n        }\n      }));\n      setRunBtnText(\"Copy Device Id\");\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: \"Error fetching response\"\n        }\n      }));\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [step]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"test-api\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDEE0\\uFE0F Test PushNotify API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-tabs\",\n      children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`,\n        onClick: () => setSelectedLanguage(lang),\n        children: lang\n      }, lang, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"api-steps flex fdc\",\n      children: [\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => {\n        var _updatedCode$step, _responses$step2;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex fdc api-step\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [index + 1, \"\\uFE0F\\u20E3 \", step]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n              ref: el => {\n                if (!codeRefs.current[step]) codeRefs.current[step] = {};\n                codeRefs.current[step][selectedLanguage] = el;\n              },\n              className: \"code-editor\",\n              step: step,\n              language: selectedLanguage,\n              code: ((_updatedCode$step = updatedCode[step]) === null || _updatedCode$step === void 0 ? void 0 : _updatedCode$step[selectedLanguage]) || codeExamples[step][selectedLanguage],\n              onCodeChange: newCode => setUpdatedCode(prev => ({\n                ...prev,\n                [step]: {\n                  [selectedLanguage]: newCode\n                }\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), ((_responses$step2 = responses[step]) === null || _responses$step2 === void 0 ? void 0 : _responses$step2[selectedLanguage]) && /*#__PURE__*/_jsxDEV(CodeBlock, {\n              mode: \"minimal\",\n              className: \"minimal\",\n              step: step,\n              language: selectedLanguage,\n              code: responses[step][selectedLanguage] || \"no response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => run(event, step),\n              className: \"api-btn\",\n              disabled: loading[step],\n              children: loading[step] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"spinner\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 21\n                }, this), \" \", step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"]\n              }, void 0, true) : step === \"Save Token\" ? runBtnText : step === \"Send Push Notification\" ? deviceId ? \"Paste Device Id\" : \"Send Push Notification\" : step\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), step === \"Generate JWT\" && /*#__PURE__*/_jsxDEV(RegisterDevice, {\n            onToken: copyToken\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 41\n          }, this)]\n        }, step, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(TestAPI, \"b8LOtT1HI3X3a3w95jJLbQxjQVw=\");\n_c = TestAPI;\nexport default TestAPI;\nvar _c;\n$RefreshReg$(_c, \"TestAPI\");","map":{"version":3,"names":["React","useState","useRef","CodeBlock","RegisterDevice","extractBody","generateTestToken","secret","codeExamples","jsxDEV","_jsxDEV","Fragment","_Fragment","languages","TestAPI","_s","selectedLanguage","setSelectedLanguage","updatedCode","setUpdatedCode","responses","setResponses","loading","setLoading","deviceToken","setDeviceToken","deviceId","setDeviceId","runBtnText","setRunBtnText","copyToken","token","replaceHolders","latestCode","btnText","step","event","t_data","localStorage","getItem","testToken","JSON","parse","res","includes","replace","prev","body","userData","clientEmail","email","codeRefs","run","current","innerText","storedCode","target","console","log","_responses$step","_responses$step$selec","_responses$step$selec2","extractedDeviceId","match","navigator","clipboard","writeText","clipboardText","readText","split","response","fetch","method","headers","stringify","data","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","lang","onClick","index","_updatedCode$step","_responses$step2","ref","el","language","code","onCodeChange","newCode","mode","disabled","onToken","_c","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/projects/jWTFcm/clients/pushnotify.api/src/components/TestApi.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\n\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\n\nconst TestAPI = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n\n  const copyToken = (token) => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n\n  async function replaceHolders(latestCode, btnText, step, event) {\n\n    let t_data = localStorage.getItem(\"t_data\");\n    let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n\n    if (!testToken) {\n      const res = await generateTestToken(testToken);\n      testToken = res.token;\n      if (!testToken) return;\n    }\n\n    if (!latestCode.includes(testToken)) {\n      latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n    }\n\n    const body = extractBody(latestCode);\n\n    body[\"access-token\"] = testToken;\n\n    if (body[\"client-email\"] === \"your-service-account-client-email\") {\n      const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n      const clientEmail = userData.email || \"your-email@gmail.com\";\n      body[\"client-email\"] = clientEmail;\n\n      latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n    }\n\n    if (body[\"private-key\"] === \"your-service-account-private-key\") {\n      body[\"private-key\"] = secret[\"secret-key\"];\n    }\n\n    return body;\n  }\n\n  const codeRefs = useRef({});\n\n  const run = async (event, step) => {\n    let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n    const storedCode = localStorage.getItem(`codeblock_${step}_${selectedLanguage}`);\n\n    const btnText = event.target.innerText;\n    let body;\n\n    if (!storedCode) {\n      body = await replaceHolders(latestCode, btnText, step, event);\n      console.log(body);\n    } else {\n      body = extractBody(latestCode);\n    }\n\n    if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n\n    if (btnText === \"Copy Device Id\") {\n      const extractedDeviceId = responses[step]?.[selectedLanguage]?.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)?.[1];\n      if (extractedDeviceId) {\n        await navigator.clipboard.writeText(extractedDeviceId);\n        setDeviceId(extractedDeviceId);\n      }\n      return;\n    }\n\n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n\n    setResponses((prev) => ({\n      ...prev,\n      [step]: { [selectedLanguage]: `${btnText.split(\" \")[0].replace(/e$/, \"\")}ing...` },\n    }));\n    setLoading((prev) => ({ ...prev, [step]: true }));\n\n    try {\n      const response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body),\n        }\n      );\n\n      const data = await response.json();\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: JSON.stringify(data, null, 2) } }));\n      setRunBtnText(\"Copy Device Id\");\n\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: \"Error fetching response\" } }));\n    } finally {\n      setLoading((prev) => ({ ...prev, [step]: false }));\n    }\n  };\n\n  return (\n    <section className=\"test-api\">\n      <h2>🛠️ Test PushNotify API</h2>\n\n      <div className=\"language-tabs\">\n        {languages.map((lang) => (\n          <button\n            key={lang}\n            className={`lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`}\n            onClick={() => setSelectedLanguage(lang)}\n          >\n            {lang}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"api-steps flex fdc\">\n        {[\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => (\n          <React.Fragment key={step}>\n            <div className=\"flex fdc api-step\">\n              <h3>{index + 1}️⃣ {step}</h3>\n\n              <CodeBlock\n                ref={(el) => {\n                  if (!codeRefs.current[step]) codeRefs.current[step] = {};\n                  codeRefs.current[step][selectedLanguage] = el;\n                }}\n                className=\"code-editor\"\n                step={step}\n                language={selectedLanguage}\n                code={updatedCode[step]?.[selectedLanguage] || codeExamples[step][selectedLanguage]}\n                onCodeChange={(newCode) =>\n                  setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: newCode } }))\n                }\n              />\n\n              {responses[step]?.[selectedLanguage] && (\n                <CodeBlock\n                  mode=\"minimal\"\n                  className=\"minimal\"\n                  step={step}\n                  language={selectedLanguage}\n                  code={responses[step][selectedLanguage] || \"no response\"}\n                />\n              )}\n\n              <button onClick={(event) => run(event, step)} className=\"api-btn\" disabled={loading[step]}>\n                {loading[step] ? (\n                  <>\n                    <span className=\"spinner\"></span> {step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"}\n                  </>\n                ) : step === \"Save Token\" ? runBtnText :\n                  step === \"Send Push Notification\" ? (deviceId ? \"Paste Device Id\" : \"Send Push Notification\")\n                    : step}\n              </button>\n            </div>\n\n            {step === \"Generate JWT\" && <RegisterDevice onToken={copyToken} />}\n          </React.Fragment>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default TestAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}