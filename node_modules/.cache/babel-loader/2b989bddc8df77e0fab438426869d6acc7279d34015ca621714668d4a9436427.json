{"ast":null,"code":"let messaging, getToken, onMessage;\nasync function initializeFirebase() {\n  try {\n    if (typeof window !== \"undefined\" && \"Notification\" in window) {\n      // Use dynamic import to load Firebase modules only when needed\n      const {\n        initializeApp\n      } = await import(\"firebase/app\");\n      const {\n        getMessaging,\n        getToken: getFCMToken,\n        onMessage: onFCMMessage\n      } = await import(\"firebase/messaging\");\n\n      // Firebase config\n      const firebaseConfig = {\n        apiKey: \"AIzaSyD9p-7xYM290Nzi--njJd7K5HgkruxMrsE\",\n        authDomain: \"light-status-41588.firebaseapp.com\",\n        projectId: \"light-status-41588\",\n        storageBucket: \"light-status-41588.firebasestorage.app\",\n        messagingSenderId: \"138858114707\",\n        appId: \"1:138858114707:web:c3aeb49f531f4013bda766\",\n        measurementId: \"G-4Y5207N5WC\"\n      };\n      const app = initializeApp(firebaseConfig);\n      messaging = getMessaging(app);\n      getToken = getFCMToken;\n      onMessage = onFCMMessage;\n    } else {\n      console.warn(\"Firebase messaging is not supported in this environment.\");\n    }\n  } catch (err) {\n    console.error(\"Error initializing Firebase:\", err);\n  }\n}\n\n// Call the function to initialize Firebase dynamically\ninitializeFirebase();\nexport { messaging, getToken, onMessage };","map":{"version":3,"names":["messaging","getToken","onMessage","initializeFirebase","window","initializeApp","getMessaging","getFCMToken","onFCMMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","console","warn","err","error"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/files/firebase.js"],"sourcesContent":["let messaging, getToken, onMessage;\n\nasync function initializeFirebase() {\n    try {\n        if (typeof window !== \"undefined\" && \"Notification\" in window) {\n            // Use dynamic import to load Firebase modules only when needed\n            const { initializeApp } = await import(\"firebase/app\");\n            const { getMessaging, getToken: getFCMToken, onMessage: onFCMMessage } = await import(\"firebase/messaging\");\n\n            // Firebase config\n            const firebaseConfig = {\n                apiKey: \"AIzaSyD9p-7xYM290Nzi--njJd7K5HgkruxMrsE\",\n                authDomain: \"light-status-41588.firebaseapp.com\",\n                projectId: \"light-status-41588\",\n                storageBucket: \"light-status-41588.firebasestorage.app\",\n                messagingSenderId: \"138858114707\",\n                appId: \"1:138858114707:web:c3aeb49f531f4013bda766\",\n                measurementId: \"G-4Y5207N5WC\"\n            };\n\n            const app = initializeApp(firebaseConfig);\n            messaging = getMessaging(app);\n            getToken = getFCMToken;\n            onMessage = onFCMMessage;\n        } else {\n            console.warn(\"Firebase messaging is not supported in this environment.\");\n        }\n    } catch (err) {\n        console.error(\"Error initializing Firebase:\", err);\n    }\n}\n\n// Call the function to initialize Firebase dynamically\ninitializeFirebase();\n\nexport { messaging, getToken, onMessage };"],"mappings":"AAAA,IAAIA,SAAS,EAAEC,QAAQ,EAAEC,SAAS;AAElC,eAAeC,kBAAkBA,CAAA,EAAG;EAChC,IAAI;IACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,cAAc,IAAIA,MAAM,EAAE;MAC3D;MACA,MAAM;QAAEC;MAAc,CAAC,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC;MACtD,MAAM;QAAEC,YAAY;QAAEL,QAAQ,EAAEM,WAAW;QAAEL,SAAS,EAAEM;MAAa,CAAC,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;;MAE3G;MACA,MAAMC,cAAc,GAAG;QACnBC,MAAM,EAAE,yCAAyC;QACjDC,UAAU,EAAE,oCAAoC;QAChDC,SAAS,EAAE,oBAAoB;QAC/BC,aAAa,EAAE,wCAAwC;QACvDC,iBAAiB,EAAE,cAAc;QACjCC,KAAK,EAAE,2CAA2C;QAClDC,aAAa,EAAE;MACnB,CAAC;MAED,MAAMC,GAAG,GAAGZ,aAAa,CAACI,cAAc,CAAC;MACzCT,SAAS,GAAGM,YAAY,CAACW,GAAG,CAAC;MAC7BhB,QAAQ,GAAGM,WAAW;MACtBL,SAAS,GAAGM,YAAY;IAC5B,CAAC,MAAM;MACHU,OAAO,CAACC,IAAI,CAAC,0DAA0D,CAAC;IAC5E;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVF,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAAC;EACtD;AACJ;;AAEA;AACAjB,kBAAkB,CAAC,CAAC;AAEpB,SAASH,SAAS,EAAEC,QAAQ,EAAEC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}