{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/components/TestApi.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\nconst TestAPI = () => {\n  _s();\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n  const copyToken = token => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n  async function replaceHolders(latestCode, btnText, step, event) {\n    if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n    let t_data = localStorage.getItem(\"t_data\");\n    let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n    if (!testToken) {\n      const res = await generateTestToken(testToken);\n      testToken = res.token;\n      if (!testToken) return;\n    }\n    if (!latestCode.includes(testToken)) {\n      latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n    }\n    const body = extractBody(latestCode);\n    body[\"access-token\"] = testToken;\n    if (body[\"client-email\"] === \"your-service-account-client-email\") {\n      const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n      const clientEmail = userData.email || \"your-email@gmail.com\";\n      body[\"client-email\"] = clientEmail;\n      latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n    }\n    if (body[\"private-key\"] === \"your-service-account-private-key\") {\n      body[\"private-key\"] = secret[\"secret-key\"];\n    }\n    return body;\n  }\n  const codeRefs = useRef({});\n  const run = async (event, step) => {\n    let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n    const storedCode = localStorage.getItem(`codeblock_${step}_${selectedLanguage}`);\n    const btnText = event.target.innerText;\n    let body;\n    if (!storedCode) {\n      body = await replaceHolders(latestCode, btnText, step, event);\n    } else {\n      body = extractBody(latestCode);\n    }\n    if (btnText === \"Copy Device Id\") {\n      var _responses$step, _responses$step$selec, _responses$step$selec2;\n      const extractedDeviceId = (_responses$step = responses[step]) === null || _responses$step === void 0 ? void 0 : (_responses$step$selec = _responses$step[selectedLanguage]) === null || _responses$step$selec === void 0 ? void 0 : (_responses$step$selec2 = _responses$step$selec.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)) === null || _responses$step$selec2 === void 0 ? void 0 : _responses$step$selec2[1];\n      if (extractedDeviceId) {\n        await navigator.clipboard.writeText(extractedDeviceId);\n        setDeviceId(extractedDeviceId);\n      }\n      return;\n    }\n    try {\n      const response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const data = await response.json();\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: JSON.stringify(data, null, 2)\n        }\n      }));\n      setRunBtnText(\"Copy Device Id\");\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: \"Error fetching response\"\n        }\n      }));\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [step]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"test-api\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDEE0\\uFE0F Test PushNotify API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-tabs\",\n      children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`,\n        onClick: () => setSelectedLanguage(lang),\n        children: lang\n      }, lang, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), [\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => {\n      var _updatedCode$step, _responses$step2;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex fdc api-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [index + 1, \"\\uFE0F\\u20E3 \", step]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n            ref: el => {\n              if (!codeRefs.current[step]) codeRefs.current[step] = {};\n              codeRefs.current[step][selectedLanguage] = el;\n            },\n            className: \"code-editor\",\n            step: step,\n            language: selectedLanguage,\n            code: ((_updatedCode$step = updatedCode[step]) === null || _updatedCode$step === void 0 ? void 0 : _updatedCode$step[selectedLanguage]) || codeExamples[step][selectedLanguage],\n            onCodeChange: newCode => setUpdatedCode(prev => ({\n              ...prev,\n              [step]: {\n                [selectedLanguage]: newCode\n              }\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), ((_responses$step2 = responses[step]) === null || _responses$step2 === void 0 ? void 0 : _responses$step2[selectedLanguage]) && /*#__PURE__*/_jsxDEV(CodeBlock, {\n            mode: \"minimal\",\n            className: \"minimal\",\n            step: step,\n            language: selectedLanguage,\n            code: responses[step][selectedLanguage] || \"no response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => run(event, step),\n            className: \"api-btn\",\n            disabled: loading[step],\n            children: loading[step] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this), \" \", step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"]\n            }, void 0, true) : step === \"Save Token\" ? runBtnText : step === \"Send Push Notification\" ? deviceId ? \"Paste Device Id\" : \"Send Push Notification\" : step\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), step === \"Generate JWT\" && /*#__PURE__*/_jsxDEV(RegisterDevice, {\n          onToken: copyToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 39\n        }, this)]\n      }, step, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(TestAPI, \"b8LOtT1HI3X3a3w95jJLbQxjQVw=\");\n_c = TestAPI;\nexport default TestAPI;\nvar _c;\n$RefreshReg$(_c, \"TestAPI\");","map":{"version":3,"names":["React","useState","useRef","CodeBlock","RegisterDevice","extractBody","generateTestToken","secret","codeExamples","jsxDEV","_jsxDEV","Fragment","_Fragment","languages","TestAPI","_s","selectedLanguage","setSelectedLanguage","updatedCode","setUpdatedCode","responses","setResponses","loading","setLoading","deviceToken","setDeviceToken","deviceId","setDeviceId","runBtnText","setRunBtnText","copyToken","token","replaceHolders","latestCode","btnText","step","event","replace","prev","clipboardText","navigator","clipboard","readText","target","innerText","t_data","localStorage","getItem","testToken","JSON","parse","res","includes","body","userData","clientEmail","email","codeRefs","run","current","storedCode","_responses$step","_responses$step$selec","_responses$step$selec2","extractedDeviceId","match","writeText","response","fetch","method","headers","stringify","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","lang","onClick","index","_updatedCode$step","_responses$step2","ref","el","language","code","onCodeChange","newCode","mode","disabled","split","onToken","_c","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/components/TestApi.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\n\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\n\nconst TestAPI = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n        \n  const copyToken = (token) => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n  \n  async function replaceHolders(latestCode, btnText, step, event){\n      if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n    \n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n    \n    \n      let t_data = localStorage.getItem(\"t_data\");\n      let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n\n      if (!testToken) {\n        const res = await generateTestToken(testToken);\n        testToken = res.token;\n        if (!testToken) return;\n      }\n\n      if (!latestCode.includes(testToken)) {\n        latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n        setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      }\n\n      const body = extractBody(latestCode);\n      \n      body[\"access-token\"] = testToken;\n\n      if (body[\"client-email\"] === \"your-service-account-client-email\") {\n        const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n        const clientEmail = userData.email || \"your-email@gmail.com\";\n        body[\"client-email\"] = clientEmail;\n\n        latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n        setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      }\n\n      if (body[\"private-key\"] === \"your-service-account-private-key\") {\n        body[\"private-key\"] = secret[\"secret-key\"];\n      } \n            \n      return body;\n  }\n\n  const codeRefs = useRef({});    \n\n  const run = async (event, step) => {\n      let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n      const storedCode = localStorage.getItem(`codeblock_${step}_${selectedLanguage}`);\n                              \n      const btnText = event.target.innerText;            \n      let body;\n      \n      if(!storedCode){\n          body = await replaceHolders(latestCode, btnText, step, event);\n      }else{\n          body = extractBody(latestCode);\n      }  \n      \n      if (btnText === \"Copy Device Id\") {\n        const extractedDeviceId = responses[step]?.[selectedLanguage]?.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)?.[1];\n        if (extractedDeviceId) {\n          await navigator.clipboard.writeText(extractedDeviceId);\n          setDeviceId(extractedDeviceId);          \n        }\n        return;\n      }                                                    \n    \n    try {\n      const response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body),\n        }\n      );\n            \n      const data = await response.json();\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: JSON.stringify(data, null, 2) } }));\n      setRunBtnText(\"Copy Device Id\");\n                        \n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: \"Error fetching response\" } }));\n    } finally {\n      setLoading((prev) => ({ ...prev, [step]: false }));\n    }\n  };\n\n  return (\n    <section className=\"test-api\">\n      <h2>🛠️ Test PushNotify API</h2>\n\n      <div className=\"language-tabs\">\n        {languages.map((lang) => (\n          <button\n            key={lang}\n            className={`lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`}\n            onClick={() => setSelectedLanguage(lang)}\n          >\n            {lang}\n          </button>\n        ))}\n      </div>\n\n      {[\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => (\n        <React.Fragment key={step}>\n          <div className=\"flex fdc api-step\">\n            <h3>{index + 1}️⃣ {step}</h3>\n\n            <CodeBlock\n              ref={ (el)=>{\n                  if(!codeRefs.current[step]) codeRefs.current[step] = {};\n                  codeRefs.current[step][selectedLanguage] = el;\n              } }              \n              className=\"code-editor\"\n              step={step}\n              language={selectedLanguage}\n              code={updatedCode[step]?.[selectedLanguage] || codeExamples[step][selectedLanguage]}\n              onCodeChange={(newCode) =>\n                setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: newCode } }))\n              }\n            />\n\n            {responses[step]?.[selectedLanguage] && (\n              <CodeBlock\n                mode=\"minimal\"\n                className=\"minimal\"\n                step={step}\n                language={selectedLanguage}                \n                code={responses[step][selectedLanguage] || \"no response\"}\n              />\n            )}\n\n            <button onClick={(event) => run(event, step)} className=\"api-btn\" disabled={loading[step]}>\n              {loading[step] ? (\n                <>\n                  <span className=\"spinner\"></span> {step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"}\n                </>\n              ) : step === \"Save Token\" ? runBtnText : \n                step === \"Send Push Notification\" ? (deviceId ? \"Paste Device Id\" : \"Send Push Notification\") \n                : step}\n            </button>\n          </div>\n\n          {step === \"Generate JWT\" && <RegisterDevice onToken={copyToken} />}\n        </React.Fragment>\n      ))}\n    </section>\n  );\n};\n\nexport default TestAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}