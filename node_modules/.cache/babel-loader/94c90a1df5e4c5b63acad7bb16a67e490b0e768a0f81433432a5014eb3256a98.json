{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/pages/ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport \"../styles/ResetPassword.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [email, setEmail] = useState(null);\n  const [tokenValid, setTokenValid] = useState(true);\n  useEffect(() => {\n    const token = searchParams.get(\"token\");\n    console.l;\n    if (!token) {\n      setResponse(\"Invalid reset token.\");\n      setTokenValid(false);\n      return;\n    }\n    try {\n      const decoded = jwtDecode(token);\n      const expiration = decoded.exp * 1000;\n      const now = Date.now();\n      if (now > expiration) {\n        setResponse(\"Reset token has expired.\");\n        setTokenValid(false);\n      } else {\n        setEmail(decoded.email);\n        setTokenValid(true);\n      }\n    } catch (err) {\n      setResponse(\"Invalid reset token.\");\n      setTokenValid(false);\n    }\n  }, [searchParams]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setResponse(\"\");\n    if (password !== confirmPassword) {\n      setResponse(\"Passwords do not match.\");\n      return;\n    }\n    const BASE_URL = \"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";\n    try {\n      const res = await fetch(BASE_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          type: \"reset-password\",\n          token: searchParams.get(\"token\"),\n          email,\n          password\n        })\n      });\n      const response = await res.json();\n      if (response.success) {\n        setResponse(\"Password reset successfully!\");\n        await alert(\"Password reset successfully!\");\n        setTimeout(() => {\n          window.close();\n        }, 2000);\n      } else {\n        setResponse(response.message);\n      }\n    } catch (err) {\n      setResponse(\"Failed to reset password.\" + err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-password-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: response.includes(\"successfully\") ? \"message\" : \"expired-message\",\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"New Password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true,\n            disabled: !tokenValid,\n            className: !tokenValid ? \"disabled\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Confirm Password\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value),\n            required: true,\n            disabled: !tokenValid,\n            className: !tokenValid ? \"disabled\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: `submit-btn ${!tokenValid ? \"disabled\" : \"\"}`,\n          disabled: !tokenValid,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPassword, \"PLHm2BzdCV2wA3qQr+tIPPpYAKc=\", false, function () {\n  return [useSearchParams];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","jwtDecode","jsxDEV","_jsxDEV","ResetPassword","_s","searchParams","password","setPassword","confirmPassword","setConfirmPassword","response","setResponse","email","setEmail","tokenValid","setTokenValid","token","get","console","l","decoded","expiration","exp","now","Date","err","handleSubmit","e","preventDefault","BASE_URL","res","fetch","method","headers","body","JSON","stringify","type","json","success","alert","setTimeout","window","close","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","onSubmit","placeholder","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/pages/ResetPassword.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\n\nimport \"../styles/ResetPassword.scss\";\n\nconst ResetPassword = () => {\n    const [searchParams] = useSearchParams();\n    const [password, setPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n    const [response, setResponse] = useState(\"\");\n    const [email, setEmail] = useState(null);\n    const [tokenValid, setTokenValid] = useState(true);\n\n    useEffect(() => {\n        const token = searchParams.get(\"token\");\n        console.l\n\n        if (!token) {\n            setResponse(\"Invalid reset token.\");\n            setTokenValid(false);\n            return;\n        }\n\n        try {\n            const decoded = jwtDecode(token);\n            const expiration = decoded.exp * 1000;\n            const now = Date.now();\n\n            if (now > expiration) {\n                setResponse(\"Reset token has expired.\");\n                setTokenValid(false);\n            } else {\n                setEmail(decoded.email);\n                setTokenValid(true);\n            }\n        } catch (err) {\n            setResponse(\"Invalid reset token.\");\n            setTokenValid(false);\n        }\n    }, [searchParams]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setResponse(\"\");\n\n        if (password !== confirmPassword) {\n            setResponse(\"Passwords do not match.\");\n            return;\n        }\n\n        const BASE_URL = \"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";\n\n        try {\n            const res = await fetch(BASE_URL, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    type: \"reset-password\",\n                    token: searchParams.get(\"token\"),\n                    email,\n                    password,\n                })\n            });\n\n            const response = await res.json();\n\n            if (response.success) {\n                setResponse(\"Password reset successfully!\")\n                await alert(\"Password reset successfully!\");\n                setTimeout(() => {\n                    window.close();\n                }, 2000)\n            } else {\n                setResponse(response.message);\n            }\n        } catch (err) {\n            setResponse(\"Failed to reset password.\" + err);\n        }\n    };\n \n    return (\n        <div className=\"reset-password-container\">\n            <div className=\"reset-password-box\">\n                <h2>Reset Password</h2>\n\n                {response && <p className={response.includes(\"successfully\") ? \"message\" : \"expired-message\"}>{response}</p>}\n\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group\">\n                        <input\n                            type=\"password\"\n                            placeholder=\"New Password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            required\n                            disabled={!tokenValid}\n                            className={!tokenValid ? \"disabled\" : \"\"}\n                        />\n                    </div>\n\n                    <div className=\"input-group\">\n                        <input\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                            required\n                            disabled={!tokenValid}\n                            className={!tokenValid ? \"disabled\" : \"\"}\n                        />\n                    </div>\n\n                    <button type=\"submit\" className={`submit-btn ${!tokenValid ? \"disabled\" : \"\"}`} disabled={!tokenValid}>\n                        Reset Password\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default ResetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}